// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2

package repository

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createPullRequestStmt, err = db.PrepareContext(ctx, createPullRequest); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePullRequest: %w", err)
	}
	if q.getPullRequestByOwnerAndRepositoryAndNumberStmt, err = db.PrepareContext(ctx, getPullRequestByOwnerAndRepositoryAndNumber); err != nil {
		return nil, fmt.Errorf("error preparing query GetPullRequestByOwnerAndRepositoryAndNumber: %w", err)
	}
	if q.listPullRequestsStmt, err = db.PrepareContext(ctx, listPullRequests); err != nil {
		return nil, fmt.Errorf("error preparing query ListPullRequests: %w", err)
	}
	if q.listPullRequestsNotNotifiedStmt, err = db.PrepareContext(ctx, listPullRequestsNotNotified); err != nil {
		return nil, fmt.Errorf("error preparing query ListPullRequestsNotNotified: %w", err)
	}
	if q.setNotifiedStmt, err = db.PrepareContext(ctx, setNotified); err != nil {
		return nil, fmt.Errorf("error preparing query SetNotified: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createPullRequestStmt != nil {
		if cerr := q.createPullRequestStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPullRequestStmt: %w", cerr)
		}
	}
	if q.getPullRequestByOwnerAndRepositoryAndNumberStmt != nil {
		if cerr := q.getPullRequestByOwnerAndRepositoryAndNumberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPullRequestByOwnerAndRepositoryAndNumberStmt: %w", cerr)
		}
	}
	if q.listPullRequestsStmt != nil {
		if cerr := q.listPullRequestsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPullRequestsStmt: %w", cerr)
		}
	}
	if q.listPullRequestsNotNotifiedStmt != nil {
		if cerr := q.listPullRequestsNotNotifiedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listPullRequestsNotNotifiedStmt: %w", cerr)
		}
	}
	if q.setNotifiedStmt != nil {
		if cerr := q.setNotifiedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setNotifiedStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                              DBTX
	tx                                              *sql.Tx
	createPullRequestStmt                           *sql.Stmt
	getPullRequestByOwnerAndRepositoryAndNumberStmt *sql.Stmt
	listPullRequestsStmt                            *sql.Stmt
	listPullRequestsNotNotifiedStmt                 *sql.Stmt
	setNotifiedStmt                                 *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                    tx,
		tx:                    tx,
		createPullRequestStmt: q.createPullRequestStmt,
		getPullRequestByOwnerAndRepositoryAndNumberStmt: q.getPullRequestByOwnerAndRepositoryAndNumberStmt,
		listPullRequestsStmt:                            q.listPullRequestsStmt,
		listPullRequestsNotNotifiedStmt:                 q.listPullRequestsNotNotifiedStmt,
		setNotifiedStmt:                                 q.setNotifiedStmt,
	}
}
